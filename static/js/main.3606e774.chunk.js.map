{"version":3,"sources":["logo.svg","components/DrumBeat.js","components/Drum.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","DrumBeat","_ref","color","react_default","a","createElement","className","style","backgroundColor","borderColor","boxShadow","concat","useAudio","url","_useState","useState","Audio","audio","Object","slicedToArray","_useState3","_useState4","playing","setPlaying","shouldStart","pause","currentTime","play","Drum","letter","sound","_useState5","_useState6","pressed","setPressed","_useAudio","_useAudio2","_useState7","_useState8","drumBeats","setDrumBeats","_useState9","_useState10","drumBeatId","setDrumBeatId","styles","border","borderRadius","margin","fontSize","padding","transition","width","textAlign","background","textShadow","userSelect","position","mouseDown","event","newDrumBeats","toConsumableArray","id","createdAt","Date","now","mouseUp","keyDown","key","toUpperCase","keyUp","useEffect","document","addEventListener","removeEventListener","console","log","drumBeatsJsx","filter","drumBeat","map","components_DrumBeat","onMouseUp","onMouseDown","App","Row_default","Col_default","xs","xl","align","components_Drum","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3606e774.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\nfunction DrumBeat({color}) {\n  return(\n    <div\n      className='key-inlay fall-off-screen'\n      style={{\n        backgroundColor: color,\n        borderColor: color,\n        boxShadow: `0 0 1rem ${color}`\n      }}\n      />\n  )\n}\nexport default DrumBeat\n","import React, { useState, useEffect } from \"react\";\nimport DrumBeat from './DrumBeat'\n\nconst useAudio = url => {\n  const [audio] = useState(new Audio(url));\n  const [playing, setPlaying] = useState(false);\n\n  const startPlaying = shouldStart => {\n    if (shouldStart) {\n      audio.pause()\n      audio.currentTime = 0\n    }\n\n    audio.play()\n    setPlaying(shouldStart)\n  }\n\n  return [playing, startPlaying];\n};\n\nfunction Drum({letter, sound, color}) {\n  const [pressed, setPressed] = useState(false)\n  const [playing, setPlaying] = useAudio(`sounds/${sound}.wav`);\n  const [drumBeats, setDrumBeats] = useState([])\n  const [drumBeatId, setDrumBeatId] = useState(0)\n\n  let styles = {\n    border: '.4rem solid black',\n    borderRadius: '.5rem',\n    margin: '0.3rem',\n    fontSize: '1.5rem',\n    padding: '0.5rem .4rem',\n    transition: 'all .07s ease',\n    width: '8rem',\n    textAlign: 'center',\n    color: 'white',\n    background: 'rgba(0,0,0,0.65)',\n    textShadow: '0 0 .5rem black',\n    userSelect: 'none',\n    position: 'relative',\n    borderColor: color,\n    boxShadow: playing ? `0 0 1rem ${color}` : ''\n  }\n\n  let mouseDown = event => {\n    setPressed(true)\n    setPlaying(true)\n\n    const newDrumBeats = [\n      ...drumBeats,\n      {\n        id: drumBeatId,\n        createdAt: Date.now()\n      }\n    ]\n\n    setDrumBeats(newDrumBeats)\n    setDrumBeatId(drumBeatId + 1)\n  }\n\n  let mouseUp = event => {\n    setPressed(false)\n  }\n\n  let keyDown = event => {\n    if (event.key.toUpperCase() === letter) {\n      mouseDown()\n    }\n  }\n\n  let keyUp = event => {\n    if (event.key.toUpperCase() === letter) {\n      mouseUp()\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", keyDown);\n    document.addEventListener(\"keyup\", keyUp);\n\n    return function cleanup() {\n      document.removeEventListener(\"keydown\", keyDown);\n      document.removeEventListener(\"keydown\", keyUp);\n    };\n  });\n\n  console.log('about to render', drumBeats)\n  const drumBeatsJsx = drumBeats\n    // FIXME: There is some weird bug in the react version, where\n    // drumbeats aren't being removed, so we check the timestamp and\n    // filter them here.\n    .filter(drumBeat => Date.now() - drumBeat.createdAt < 5000)\n    .map(drumBeat => (\n    <DrumBeat\n      key={drumBeat.id}\n      color={color}/>)\n  )\n\n  return(\n    <div\n      className={pressed ? \"playing\" : \"\"}\n      style={styles}\n      onMouseUp={mouseUp}\n      onMouseDown={mouseDown}>\n      <div className='kbd'>{letter}</div>\n      <span\n        className=\"sound\"\n        style={{color: color}}\n        >{sound}</span>\n      {drumBeatsJsx}\n    </div>\n  )\n}\nexport default Drum\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Drum from './components/Drum'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nclass App extends Component {\n  render() {\n    const drums = [\n      {letter: 'A', sound: 'clap', color: '#FF0066'},\n      {letter: 'S', sound: 'hihat', color: '#00FF00'},\n      {letter: 'D', sound: 'kick', color: '#00FFFF'},\n      {letter: 'F', sound: 'openhat', color: '#FFFF00'},\n      {letter: 'G', sound: 'boom', color: '#9D00FF'},\n      {letter: 'H', sound: 'ride', color: '#FF6600'},\n      {letter: 'J', sound: 'snare', color: '#0033FF'},\n      {letter: 'K', sound: 'tom', color: '#FF0000'},\n      {letter: 'L', sound: 'tink', color: '#FF0066'},\n    ]\n    return (\n      <div className=\"App\">\n\n        <div className=\"keys\">\n          <Row>\n            {drums.map(({letter, sound, color}) =>\n              <Col key={letter} xs={4} xl=\"auto\" align=\"center\">\n                <Drum\n                  letter={letter}\n                  sound={sound}\n                  color={color} />\n              </Col>\n            )}\n          </Row>\n        </div>\n      </div>\n    );\n  }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}